#!/usr/bin/env python
#coding=utf-8
"""

Pre-requisites:
A folder containing:
GIMP DEM files, 15 m resolution, with original file names
GIMP IceMask files, 15 m resolution, with original file names
CSV file of GIMP tile extents, generated by geoutils.extract_gimp_extent()
geoutils/georaster.py

Author : Andrew Tedstone
Date : November 2014 

"""

import pandas as pd
import mpl_toolkits.basemap.pyproj as pyproj
import os

import georaster

GIMP_dem_prefix = 'gimpdem'
GIMP_mask_prefix = 'GimpIceMask_15m_tile'
# GIMP projection, as shown on GIMP home page
GIMP_PROJ4 = '+init=EPSG:3413'



def extract_gimp_extents(L0dir,filestart,save_to):
    """
    Extract geographic extents of GIMP tiles and save them to CSV file.

    L0dir : str, location of GIMP data, 
                e.g. '/disk/scratch/local.2/L0data/GIMP/'
    filestart : str, e.g. GimpIceMask_15m_tile
    save_to : str, e.g. Gimp_15m_tile_GIMP.csv

    """

    rows = np.arange(0,6)
    cols = np.arange(0,6)

    with open('GimpIceMask_15m_extents.csv','w') as f_out:
        f_out.write('row,col,xmin,xmax,ymin,ymax\n')
        for r in rows:
            for c in cols:
                print r,c
                f = filestart + str(r) + '_' + str(c) + '.tif'
                im = georaster.SingleBandRaster(L0dir + f)
                ex = im.extent
                f_out.write(str(r) + ',' + str(c) + ',' + str(ex[0]) + ',' + \
                    str(ex[1]) + ',' + str(ex[2]) + ',' +str(ex[3]) + '\n')
    f_out.close()



def create_gimp_raster(image_path,gimp_extents_csv,outfile,clean=False,
                     verbose=True,tile_type='dem'):
    """ Create a raster from the GIMP Ice Mask/DEM corresponding to the 
    dimensions and extent of the input image.

    Parameters:
        image_path : str, path to a geo-referenced image (GeoTIFF)
        gimp_extents_csv : str, path to csv containing extents of every 15 m
            GIMP tile (generated by geoutils/extract_gimp_extent),
            all mask files must be in same folder as this csv.
        outfile : str, path to the output GeoTiff file
        clean : True/False, default True, clean up after merging operation.
        verbose: True/False, default False, display coordinate conversions
        tile_type : str, 'dem' or 'mask'

    Returns:
        Creates the outfile.

    AJT May 2014.
    """

    # Name of each GIMP file before row/col notation
    if tile_type == 'dem':
        GIMP_FILE_PREFIX = GIMP_dem_prefix
    elif tile_type == 'mask':
        GIMP_FILE_PREFIX = GIMP_mask_prefix

    # Name of temporary file to merge to
    GIMP_TMP_MERGE = 'temporary_merge.tif'

    # Base of GIMP dir
    GIMP_DIR = '/'.join(gimp_extents_csv.split('/')[0:-1]) + '/'

    # Import list of GIMP file extents
    extents = pd.read_csv(gimp_extents_csv,delimiter=',',
                            header=0)

    # Load image ref
    in_image = georaster.SingleBandRaster(image_path,load_data=False)

    # The landsat tiles and GIMP tiles are in different projection systems, so
    # we must convert them both to lat/lon for comparison.
    # Deal with landsat georeferencing
    ex = in_image.extent
    lxmin,lymin = in_image.proj(ex[0],ex[2],inverse=True)
    lxmax,lymax = in_image.proj(ex[1],ex[3],inverse=True)

    if verbose == True:
        print 'Tile:'
        print lxmin,lymin
        print lxmax,lymax

    # Set up GIMP tile projection (they are all the same)
    proj_gimp = pyproj.Proj(GIMP_PROJ4)

    # Find the GIMP tiles which cover area for this landsat tile
    use = []
    for ix,tile in extents.iterrows():

        mxmin,mymin = proj_gimp(tile['xmin'],tile['ymin'],inverse=True)
        mxmax,mymax = proj_gimp(tile['xmax'],tile['ymax'],inverse=True)

        if verbose == True:
            print tile['row'],tile['col']
            print mxmin,mymin
            print mxmax,mymax

        xuse = False
        yuse = False

        if (lxmin > mxmin) and (lxmin < mxmax):
            xuse = True

        if (lxmax > mxmin) and (lxmax < mxmax):
            xuse = True

        if xuse == True:
            if (lymin > mymin) and (lymin < mymax):
                yuse = True
            if (lymax > mymin) and (lymax < mymax):
                yuse = True

        if yuse == True:
            use.append((int(tile['row']),int(tile['col'])))

    if verbose == True:
        print use

    # Create string of GIMP files to build merged tile from
    build_from = ''
    for r,c in use:
        build_from = build_from + GIMP_DIR + GIMP_FILE_PREFIX + str(r) + \
                     '_' + str(c) + '.tif '

    # Do the merge
    command = 'gdal_merge.py -o ' + GIMP_DIR + GIMP_TMP_MERGE + \
              ' -ps 30 30 ' + build_from
    print "**** COMMAND : %s" %command; os.system(command)

    # Create the merged GIMP tile for the input img at appropriate resolution
    xres, yres = in_image.get_pixel_size()
    command = "gdalwarp -t_srs '" + in_image.srs.ExportToProj4() + "' -te " + str(ex[0]) + " " + \
                str(ex[2]) + " " + str(ex[1]) + \
                " " + str(ex[3]) + " -tr " + str(xres) + " " + str(yres) +\
                " " + GIMP_DIR + GIMP_TMP_MERGE + " " + outfile
    print "**** COMMAND : %s" %command; os.system(command)

    # Clean up
    if clean == True:
        os.remove(GIMP_DIR + GIMP_TMP_MERGE)